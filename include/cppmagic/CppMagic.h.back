#pragma once

#include "cppmagic/Core.h"
#include "cppmagic/Settings.h"
#include "cppmagic/TagManager.h"

namespace cmg
{
class CppMagic
{
public:
    CppMagic(const cmgSP<cmg::TagManager> tagManager, const cmg::Settings& settings);

    // Run the program.
    bool run(const cmgVector<std::pair<FilePath, FilePath>>& filePairs);
    // Register comparator.
    void registerComparator(const std::string& name, MagicComparator& comparator);

private:
    // Pre process the tag pairs.
    void preProcess(const std::pair<cmgSPVector<cmg::TagInfo>, cmgSPVector<cmg::TagInfo>>& tagPairs);
    // Filter and process proto impl pairs.
    void filterAndProcess(cmgVector<cmg::ProtoImplTagPair>& protoImplPairs, const FilePath& newSourceFile);
    // Fill empty implementation.
    void fillEmptyImpl(cmgVector<cmg::ProtoImplTagPair>& protoImplPairs, const FilePath& sourceDir);
    // Load the code from the file.
    void loadCodeStr(cmgVector<cmg::ProtoImplTagPair>& protoImplPairs, const FilePath& headerFile, const FilePath& sourceFile);
    // Setup parameters.
    void setupParameters(const cmgSPVector<cmg::TagInfo>& tagPairs, const cmg::FileCategory& fileCategory);
    // Setup prototype and implementation pairs.
    cmgVector<cmg::ProtoImplTagPair> setupProtoImplPairs(const std::pair<cmgSPVector<cmg::TagInfo>, cmgSPVector<cmg::TagInfo>>& tagPairs);

private:
    // Store the settings.
    cmg::Settings mSettings;
    // Fill empty implementations.
    bool mFillEmptyImpl = false;
    // Store whether to sort.
    bool mSort = true;
    // Store the Tag manager.
    cmgSP<cmg::TagManager> mTagManager;
    // Store the active comparator.
    MagicComparator mActiveComparator;
    // Store the sorting callbacks.
    cmgMap<std::string, cmg::MagicComparator> mComparatorMap;
};

} // namespace cmg
